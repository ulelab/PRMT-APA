---
title: "metaprofiles"
author: "Charlotte Capitanchik"
format: html
editor: visual
---

```{r}
library(rtracklayer)
library(GenomicRanges)
```

```{r}
#import bigwigs, for this script they need to end with forward.bigWig or reverse.bigWig
rnaseq_bw = list.files("bigwigs/siPTB",full.names=TRUE,pattern = "\\.bigWig$")
experiment_name = "siPTB"
```

```{r}
granges_list <- lapply(rnaseq_bw, function(file_path) {
  # Determine the strand from the file name
  strand <- ifelse(grepl("forward", file_path), "+", "-")
  # Import the BigWig file
  gr_data <- rtracklayer::import(file_path, format = "BigWig")
  # Assign the strand
  strand(gr_data) <- strand
  gr_data
})



# Updated merge function to maintain scores
merge_strands <- function(forward, reverse) {
  if (is.null(forward) || is.null(reverse)) {
    return(ifelse(is.null(forward), reverse, forward))
  }
  # Combine forward and reverse
  combined <- c(forward, reverse)
  return(combined)
}

sample_names <- gsub("^(.*)(forward|reverse)\\.bigWig$", "\\1", basename(rnaseq_bw))
sample_names <- gsub("(forward|reverse)$", "", sample_names)  # Ensure to remove the strand part

# Group GRanges objects by sample
sample_groups <- split(granges_list, sample_names)


# Process in smaller batches
batch_process <- function(batch_data) {
  lapply(batch_data, function(gr_list) {
    merge_strands(gr_list[[1]], gr_list[[2]])
  })
}

# divide your sample_groups into manageable chunks
batches <- split(sample_groups, ceiling(seq_along(sample_groups) / 5))  # Adjust the denominator for batch size
processed_batches <- lapply(batches, batch_process)

# Combine processed data
merged_samples <- do.call(c, processed_batches)

length(merged_samples)

# Normalise by library size
# Function to normalize scores by library size (CPM)
normalize_scores <- function(gr) {
  total_score <- sum(mcols(gr)$score)
  cpm <- (mcols(gr)$score / total_score) * 1e6  # Convert to counts per million
  mcols(gr)$score <- cpm  # Assign normalized scores back to the GRanges object
  return(gr)
}

# Apply normalization to each GRanges object in the list
normalized_granges_list <- lapply(merged_samples, normalize_scores)


```

Read in the poly(A) sites we care about.

```{r}
down_UTR_APA_proximal_sites = fread("../../../repos/PRMT-APA/motif_and_clip_analysis/LU99_timecourse/bed/proximal/sig_0_15_down_proximal_sites.bed") %>%
  dplyr::rename(
    chr = V1, 
    start = V2,
    end = V3, 
    strand = V6) %>%
  unique()

control_0_075_proximal_sites_0_075 = fread("../../../repos/PRMT-APA/motif_and_clip_analysis/LU99_timecourse/bed/proximal/control/control_0_075_proximal_sites_0_075_usage.bed") %>%
  dplyr::rename(
    chr = V1, 
    start = V2,
    end = V3, 
    strand = V6) %>%
  unique()

up_UTR_APA_distal_sites = fread("../../../repos/PRMT-APA/motif_and_clip_analysis/LU99_timecourse/bed/distal/sig_0_15_up_distal_sites.bed") %>%
  dplyr::rename(
    chr = V1, 
    start = V2,
    end = V3, 
    strand = V6) %>%
  unique()
control_0_075_distal_sites_0_075 = fread("../../../repos/PRMT-APA/motif_and_clip_analysis/LU99_timecourse/bed/distal/control/control_0_075_distal_sites_0_075_usage.bed") %>%
  dplyr::rename(
    chr = V1, 
    start = V2,
    end = V3, 
    strand = V6) %>%
  unique()

nrow(up_UTR_APA_distal_sites)
nrow(control_0_075_distal_sites_0_075)
nrow(down_UTR_APA_proximal_sites)
nrow(control_0_075_proximal_sites_0_075)

down_prox = makeGRangesFromDataFrame(down_UTR_APA_proximal_sites, keep.extra.columns = TRUE)
ctrl_prox = makeGRangesFromDataFrame(control_0_075_proximal_sites_0_075, keep.extra.columns = TRUE)
up_dist = makeGRangesFromDataFrame(up_UTR_APA_distal_sites, keep.extra.columns = TRUE)
ctrl_dist = makeGRangesFromDataFrame(control_0_075_distal_sites_0_075, keep.extra.columns = TRUE)

down_prox_800 = resize(down_prox, width = 800, fix = "center")
ctrl_prox_800 = resize(ctrl_prox, width = 800, fix = "center")
up_dist_800 = resize(up_dist, width = 800, fix = "center")
ctrl_dist_800 = resize(ctrl_dist, width = 800, fix = "center")

```

```{r}
UTR_prox = genomation::ScoreMatrixList(target = normalized_granges_list, windows = down_prox_800, strand.aware=TRUE, weight.col= "score", cores=4)
UTR_dist = genomation::ScoreMatrixList(target = normalized_granges_list, windows = up_dist_800,strand.aware=TRUE, weight.col= "score", cores=4 )
CTRL_prox = genomation::ScoreMatrixList(target = normalized_granges_list, windows = ctrl_prox_800,strand.aware=TRUE, weight.col= "score", cores=4)
CTRL_dist = genomation::ScoreMatrixList(target = normalized_granges_list, windows = ctrl_dist_800,strand.aware=TRUE, weight.col= "score", cores=4)


```

```{r}
make_meta_dataframe = function(df, condition, location, sample){
  new_df = df %>%
  pivot_longer(cols=everything()) %>%
  group_by(name) %>%
  mutate(mean=mean(value), 
         name=as.numeric(gsub("V","",name)),
         condition=condition,
         location=location,
         sample=sample) %>%
  select(name, mean, condition, location, sample) %>%
  unique()
  return(new_df)
}

combine_dataframes = function(scorematrixlist, condition, location){
  df_list = list()
  for (i in 1:length(scorematrixlist)){
    df_list[[i]] = make_meta_dataframe(as.data.frame(scorematrixlist[[i]]), condition, location,unique(sample_names)[[i]])
  }
  for_plot=bind_rows(df_list)
  return(for_plot)
}


apa_prox_df = combine_dataframes(UTR_prox,"apa","proximal")
apa_dist_df = combine_dataframes(UTR_dist,"apa","distal")
ctrl_prox_df = combine_dataframes(CTRL_prox,"ctrl","proximal")
ctrl_dist_df = combine_dataframes(CTRL_dist,"ctrl","distal")

final_to_plot = bind_rows(apa_prox_df, apa_dist_df,ctrl_prox_df,ctrl_dist_df) 


final_to_plot = final_to_plot %>%
  mutate(location=factor(location, levels=c("proximal","distal")),
         condition=factor(condition, levels=c("ctrl","apa")))


ggplot(final_to_plot,aes(x=name,y=mean,color=sample)) +
  geom_line(aes(y=rollmean(mean, 7, na.pad=TRUE))) + 
  scale_color_tableau() +
  facet_grid(condition ~ location) + theme_few() +
  geom_vline(xintercept=c(400), linetype="dotted") +
  scale_x_continuous(breaks = seq(0, 800, by = 100),   # X-axis breaks every 100 units
                     labels = seq(-400, 400, by = 100),  # X-axis labels every 100 units
                     limits = c(0, 800)) +
  ylab("Mean CPM") +
  xlab("Distance from polyA site") +
  ggtitle(experiment_name) +
  theme(aspect.ratio=1)

ggsave(paste0(experiment_name,"siPTB.png"))
```
