cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- colorRampPalette(brewer.pal(8, "Set1"))(length(conditions))
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.7), -0.7)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- colorRampPalette(brewer.pal(8, "Set1"))(length(conditions))
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
# Set rownames
rownames(res_dist) <- res_dist$pseq_ID
res_dist = res %>% filter(site_type=="distal")
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("grey","darkseagreen4","darkslategray3")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
res_dist
res_dist
res_dist %>% mutate(Estimate= ifelse(p_val_adj < 0.05,Estimate,0))
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
res_dist = res_dist %>% mutate(Estimate= ifelse(p_val_adj < 0.05,Estimate,0))
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
# pdf("cpa-perturbseq-heatmap.pdf")
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
# dev.off()
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
res_dist = res_dist %>% mutate(Estimate= ifelse(p_val_adj < 0.05,Estimate,0))
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
# res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
pdf("cpa-perturbseq-heatmap-sigFilt-nocap.pdf")
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
dev.off()
reslist = list()
for (protein in kd_list){
reslist[[protein]] = left_join(all_res[[protein]] %>% rownames_to_column("pseq_ID"),merged_ref_df, by=c("pseq_ID"="pseq_ID")) %>% filter(!is.na(seqnames)) %>%
mutate(kd=protein)
}
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
pdf("cpa-perturbseq-heatmap.pdf")
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
dev.off()
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
res_dist = res_dist %>% mutate(Estimate= ifelse(p_val_adj < 0.05,Estimate,0))
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
pdf("cpa-perturbseq-heatmap-sigFilt.pdf")
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
dev.off()
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
res_dist = res_dist %>% mutate(Estimate= ifelse(p_val_adj < 0.05,Estimate,0))
# Ensure all conditions are covered
conditions <- unique(res_dist$condition)
# Define a color palette for the conditions
condition_colors <- c("darkseagreen4","darkslategray3","grey")
names(condition_colors) <- conditions
# Cap the Estimate values at 1 and -1
# res_dist$Estimate <- pmax(pmin(res_dist$Estimate, 0.5), -0.5)
# Reshape data into a matrix form suitable for heatmap
heatmap_data <- reshape2::dcast(res_dist, pseq_ID ~ kd, value.var = "Estimate")
rownames(heatmap_data) <- heatmap_data$pseq_ID
heatmap_data <- as.matrix(heatmap_data[,-1])
# Define colors
heatmap_colors <- colorRamp2(c(min(heatmap_data, na.rm = TRUE), 0, max(heatmap_data, na.rm = TRUE)), c("blue", "white", "red"))
# Create a row annotation for conditions
row_anno <- rowAnnotation(
condition = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)],
col = list(condition = condition_colors),
annotation_legend_param = list(condition = list(title = "Condition"))
)
# Create the heatmap
ht <- Heatmap(
heatmap_data,
name = "Estimate",
col = heatmap_colors,
cluster_columns = TRUE,
cluster_rows = TRUE,
show_row_names = FALSE,
show_column_names = TRUE,
row_names_side = "left",
row_split = res_dist$condition[match(rownames(heatmap_data), res_dist$pseq_ID)], # Split rows by condition
gap = unit(2, "mm"),
left_annotation = row_anno, # Add row annotation here
heatmap_legend_param = list(
title = "Estimate",
title_position = "topcenter",
legend_direction = "horizontal",
legend_width = unit(4, "cm")
)
)
pdf("cpa-perturbseq-heatmap-sigFilt-nocap.pdf")
# Draw the heatmap
draw(ht, heatmap_legend_side = "bottom", annotation_legend_side = "right")
dev.off()
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
res_dist
res_dist %>%
group_by(kd) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05),
fraction_changed = total_change / total
)
res_dist %>%
group_by(kd,condition) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05),
fraction_changed = total_change / total
)
res_dist %>%
group_by(kd,condition) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05),
fraction_changed = total_change / total
) %>%
ggplot(.,aes(x=kd,y=fraction_changed,group=condition)) + geom_col() + theme_few()
res_dist %>%
group_by(kd,condition) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05),
fraction_changed = total_change / total
) %>%
ggplot(.,aes(x=kd,y=fraction_changed,fill=condition)) + geom_bar(position = "dodge", stat = "identity") + theme_few()
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
# Calculate the summary statistics
summary_data <- res_dist %>%
group_by(kd, condition) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05),
fraction_changed = total_change / total
) %>%
ungroup()
# Filter the summary data for DMAi condition to reorder the kd factor levels
order_data <- summary_data %>%
filter(condition == "DMAi") %>%
arrange(desc(fraction_changed))
# Reorder the kd factor levels
summary_data <- summary_data %>%
mutate(kd = factor(kd, levels = order_data$kd))
# Create the bar chart
ggplot(summary_data, aes(x = kd, y = fraction_changed, fill = condition)) +
geom_bar(position = "dodge", stat = "identity") +
theme_few() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x = "KD", y = "Fraction Changed", title = "Fraction Changed by KD and Condition")
res = do.call(rbind,reslist)
res_dist = res %>% filter(site_type=="distal")
# Calculate the summary statistics
summary_data <- res_dist %>%
group_by(kd, condition) %>%
summarise(
total = n(),
total_change = sum(p_val_adj < 0.05 & abs(Estimate) >= 0.2),
fraction_changed = total_change / total
) %>%
ungroup()
# Filter the summary data for DMAi condition to reorder the kd factor levels
order_data <- summary_data %>%
filter(condition == "DMAi") %>%
arrange(desc(fraction_changed))
# Reorder the kd factor levels
summary_data <- summary_data %>%
mutate(kd = factor(kd, levels = order_data$kd))
# Create the bar chart
ggplot(summary_data, aes(x = kd, y = fraction_changed, fill = condition)) +
geom_bar(position = "dodge", stat = "identity") +
theme_few() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x = "KD", y = "Fraction Changed", title = "Fraction Changed by KD and Condition")
# Create the bar chart
ggplot(summary_data, aes(x = kd, y = fraction_changed, fill = condition)) +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_manual(values = condition_colors) +
theme_few() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(x = "KD", y = "Fraction Changed", title = "Fraction Changed by KD and Condition")
ggsave("fraction-changed.png")
